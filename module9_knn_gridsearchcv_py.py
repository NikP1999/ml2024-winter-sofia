# -*- coding: utf-8 -*-
"""module9_knn_gridsearchcv.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1reZRqiIj1GzjyXOit1ea2ZCc0SfjMKgq
"""

from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Generate some example data
X, y = make_classification(n_samples=100, n_features=20, n_classes=2, random_state=42)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define a range of k values for the grid search
param_grid = {'n_neighbors': range(1, 11)}

# Create a kNN classifier
knn = KNeighborsClassifier()

# Perform grid search to find the best value of k
grid_search = GridSearchCV(knn, param_grid, cv=5, scoring='accuracy')
grid_search.fit(X_train, y_train)

# Get the best value of k
best_k = grid_search.best_params_['n_neighbors']

# Train the classifier with the best value of k
best_knn = KNeighborsClassifier(n_neighbors=best_k)
best_knn.fit(X_train, y_train)

# Make predictions on the test data
y_pred = best_knn.predict(X_test)

# Calculate the accuracy of the model
test_accuracy = accuracy_score(y_test, y_pred)

print("The best k for kNN Classification is:", best_k)
print("The corresponding test accuracy is:", "{:.4f}".format(test_accuracy))